generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prismaClient"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model schema_migrations {
  version String @id @db.VarChar(128)
}

model DripPosition {
  publicKey                                 String    @id @db.VarChar(44)
  globalConfig                              String    @db.VarChar(44)
  pairConfig                                String    @db.VarChar(44)
  inputTokenAccount                         String    @db.VarChar(44)
  outputTokenAccount                        String    @db.VarChar(44)
  ownerValue                                String?   @db.VarChar(44)
  ownerKind                                 ownerkind
  dripAmountPreFees                         Decimal   @db.Decimal
  maxSlippageBps                            Int
  maxPriceDeviationBps                      Int
  dripFeeBps                                Int
  dripPositionNftMint                       String?   @db.VarChar(44)
  autoCreditEnabled                         Boolean
  dripAmountRemainingPostFeesInCurrentCycle Decimal   @db.Decimal
  dripInputFeesRemainingForCurrentCycle     Decimal   @db.Decimal
  totalInputFeesCollected                   Decimal   @db.Decimal
  totalOutputFeesCollected                  Decimal   @db.Decimal
  totalInputTokenDrippedPostFees            Decimal   @db.Decimal
  totalOutputTokenReceivedPostFees          Decimal   @db.Decimal
  frequencyInSeconds                        Decimal   @db.Decimal
  dripMaxJitter                             Int
  dripActivationGenesisShift                Int
  dripActivationTimestamp                   DateTime  @db.Timestamptz(6)
  cycle                                     Decimal   @db.Decimal
}

model DripPositionNftMapping {
  publicKey           String @id @db.VarChar(44)
  dripPositionNftMint String @db.VarChar(44)
  dripPosition        String @db.VarChar(44)
  bump                Int
}

model DripPositionSigner {
  publicKey    String @id @db.VarChar(44)
  dripPosition String @db.VarChar(44)
  version      Int
  bump         Int
}

model DripPositionWalletOwner {
  dripPositionPublicKey String  @id @db.VarChar(44)
  walletPublicKey       String? @db.VarChar(44)
}

model GlobalConfig {
  publicKey          String    @id @db.VarChar(44)
  version            Int
  superAdmin         String    @db.VarChar(44)
  admins             String[]  @db.VarChar(44)
  adminPermissions   Decimal[] @db.Decimal
  defaultDripFeeBps  Int
  globalConfigSigner String    @db.VarChar(44)
}

model GlobalConfigSigner {
  publicKey    String @id @db.VarChar(44)
  version      Int
  globalConfig String @db.VarChar(44)
  bump         Int
}

model PairConfig {
  publicKey                   String     @id @db.VarChar(44)
  version                     Int
  globalConfig                String     @db.VarChar(44)
  inputTokenMint              String     @db.VarChar(44)
  outputTokenMint             String     @db.VarChar(44)
  bump                        Int
  defaultPairDripFeeBps       Int
  inputTokenDripFeePortionBps Int
  inputTokenPriceOracleKind   oraclekind
  inputTokenPriceOracleValue  String?    @db.VarChar(44)
  outputTokenPriceOracleKind  oraclekind
  outputTokenPriceOracleValue String?    @db.VarChar(44)
}

model TokenAccount {
  publicKey         String   @id @db.VarChar(44)
  mint              String   @db.VarChar(44)
  owner             String   @db.VarChar(44)
  amount            Decimal  @db.Decimal
  delegate          String?  @db.VarChar(44)
  delegateAmount    Decimal  @db.Decimal
  isInitialized     Boolean
  isFrozen          Boolean
  isNative          Boolean
  rentExemptReserve Decimal? @db.Decimal
  closeAuthority    String?  @db.VarChar(44)
}

enum ownerkind {
  Direct
  Tokenized
}

enum oraclekind {
  Unavailable
  Pyth
}
